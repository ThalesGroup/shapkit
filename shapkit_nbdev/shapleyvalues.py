# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/shapleyvalues.ipynb (unless otherwise specified).

__all__ = ['ShapleyValues']

# Cell
def ShapleyValues(x, fc, r):
    """
    Calculate the exact Shapley Values for an element x and
    defined by a game based on reference r and function fc

    Parameters
    ----------
    x : numpy array or pandas Series
        The instance for which we want to calculate Shapley value of
        each attribute

    fc : python function
        A function which takes as input an array of len(x) and returns
        a real number

    r : numpy array or pandas Series
        The reference instance. The Shapley values (attribute importance)
        is a contrastive explanation according to this reference

    Returns
    -------
    Φ : pandas Series
        Shapley values of each attribute

    References
    ----------
    A Unified Approach to Interpreting Model Predictions
    Scott M. Lundberg, Su-In Lee, 2017 \n
    NIPS 2017

    The Explanation Game: Explaining Machine Learning Models
    with Cooperative Game Theory
    Luke Merrick, Ankur Taly, 2019
    """

    # Get general information
    feature_names = list(x.index)
    d = len(feature_names) # dimension
    set_features = set(feature_names)

    # Store Shapley Values in a pandas Series
    Φ = pd.Series(np.zeros(d), index=feature_names)

    # Start computation (number of coalitions: 2**d - 1)
    for cardinal_S in tqdm(range(0, d)):
        # weight
        ω = factorial(cardinal_S) * (factorial(d - cardinal_S - 1))
        ω /= factorial(d)
        # iter over all combinations of size cardinal_S
        for S in combinations(feature_names, cardinal_S):
            S = list(S)
            z_S = np.array([x[col] if col in S else r[col] for col in feature_names])
            f_S = fc(z_S)
            # Consider only features outside of S
            features_out_S = set_features - set(S)
            for j in features_out_S:
                S_union_j = S + [j]
                z_S_union_j = np.array([x[col] if col in S_union_j else r[col] for col in feature_names])
                f_S_union_j = fc(z_S_union_j)
                # Update Shapley value of attribute i
                Φ[j] += ω * (f_S_union_j - f_S)

    return Φ